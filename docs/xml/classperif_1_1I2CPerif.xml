<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classperif_1_1I2CPerif" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>perif::I2CPerif</compoundname>
    <basecompoundref refid="classperif_1_1Perif" prot="public" virt="non-virtual">perif::Perif</basecompoundref>
    <basecompoundref refid="classI2Cdev" prot="protected" virt="non-virtual">I2Cdev</basecompoundref>
    <includes refid="I2CPerif_8hpp" local="no">I2CPerif.hpp</includes>
    <templateparamlist>
      <param>
        <type>i2c_port_t</type>
        <declname>port</declname>
        <defname>port</defname>
        <defval>I2C_NUM_0</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>sdaPullup</declname>
        <defname>sdaPullup</defname>
        <defval>false</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>sclPullup</declname>
        <defname>sclPullup</defname>
        <defval>false</defval>
      </param>
      <param>
        <type>uint32_t</type>
        <declname>frequency</declname>
        <defname>frequency</defname>
        <defval>100000UL</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classperif_1_1I2CPerif_1a3275bcc89b3d8ddfa221fb76669c2d45" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t perif::I2CPerif&lt; port, sdaPullup, sclPullup, frequency &gt;::address</definition>
        <argsstring></argsstring>
        <name>address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the address for this <ref refid="namespacei2c" kindref="compound">i2c</ref> device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/I2CPerif.hpp" line="58" column="1" bodyfile="main/perif/I2CPerif.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classperif_1_1Perif_1acfa1256201bead82ccce1a0a8bcc24e1" prot="protected" static="no" mutable="no">
        <type><ref refid="classTimer" kindref="compound">Timer</ref></type>
        <definition>Timer perif::Perif::timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A timer for managing peripheral updates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="78" column="1" bodyfile="main/perif/Perif.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classI2Cdev_1a1d1e63732aa9f50369172b27a034129c" prot="protected" static="no" mutable="no">
        <type>const i2c_port_t</type>
        <definition>const i2c_port_t I2Cdev::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The I2C port for this device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="63" column="1" bodyfile="main/perif/i2c/I2Cdev.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classI2Cdev_1a94b914bfcbd0fe1f6fdd7b9c6f4ab921" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool I2Cdev::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether the device is initialized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="67" column="1" bodyfile="main/perif/i2c/I2Cdev.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classperif_1_1I2CPerif_1aa91b8eca31223fddd191a50b8a0a526d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool perif::I2CPerif&lt; port, sdaPullup, sclPullup, frequency &gt;::begin</definition>
        <argsstring>() override</argsstring>
        <name>begin</name>
        <reimplements refid="classperif_1_1Perif_1ae7f1d1a4e9cd2343d51abc4ee21000cf">begin</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the I2C port.</para>
<para><simplesect kind="return"><para>whether the port was initialized </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/I2CPerif.hpp" line="65" column="1" bodyfile="main/perif/I2CPerif.hpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classperif_1_1I2CPerif_1a80ab5e9bf8a8f2f2278a35d646442b1b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>perif::I2CPerif&lt; port, sdaPullup, sclPullup, frequency &gt;::I2CPerif</definition>
        <argsstring>(const char *name, uint8_t address)</argsstring>
        <name>I2CPerif</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Explicit value constructor for an I2C peripheral.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the peripheral </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="namespacei2c" kindref="compound">i2c</ref> address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/I2CPerif.hpp" line="76" column="1" bodyfile="main/perif/I2CPerif.hpp" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classperif_1_1I2CPerif_1aa8741297b2f5f9a0242806afa26b7361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool perif::I2CPerif&lt; port, sdaPullup, sclPullup, frequency &gt;::isConnected</definition>
        <argsstring>() override</argsstring>
        <name>isConnected</name>
        <reimplements refid="classperif_1_1Perif_1ab9a17fad04e595f3ac0c78b9d3be4c9e">isConnected</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this I2C port is initialized.</para>
<para><simplesect kind="return"><para>if the I2C port is initialized </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/I2CPerif.hpp" line="87" column="1" bodyfile="main/perif/I2CPerif.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classperif_1_1Perif_1ad6fe1a13354bba4af4cc2751399ed93c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void perif::Perif::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a manual update of peripheral data and notifies observers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="130" column="1" bodyfile="main/perif/Perif.hpp" bodystart="130" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classperif_1_1PerifBase_1a2e8bcc221ee253b21b61c7c07307d931" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void perif::PerifBase::registerHook</definition>
        <argsstring>(function&lt; void(DevMap &amp;)&gt; &amp;&amp;hook)</argsstring>
        <name>registerHook</name>
        <param>
          <type>function&lt; void(<ref refid="Perif_8hpp_1a358ff4ee6d24694ee7661f0cce14377e" kindref="member">DevMap</ref> &amp;)&gt; &amp;&amp;</type>
          <declname>hook</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a hook for obtaining sensor data on update in Json format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hook</parametername>
</parameternamelist>
<parameterdescription>
<para>the observer function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="63" column="1" bodyfile="main/perif/Perif.hpp" bodystart="63" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classperif_1_1Perif_1a7c9b9c1af5300dc5c007f9559fefbffe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void perif::Perif::updateData</definition>
        <argsstring>()=0</argsstring>
        <name>updateData</name>
        <reimplementedby refid="classperif_1_1GPS_1a7ab6969badea019cca62aa68d440b948">updateData</reimplementedby>
        <reimplementedby refid="classperif_1_1AccelGyro_1afa20b763b6725d3fc18cfa4bc0291df4">updateData</reimplementedby>
        <reimplementedby refid="classperif_1_1USDist_1a81772dc47655567c734d124d38c7aac0">updateData</reimplementedby>
        <reimplementedby refid="classperif_1_1BarPAT_1a0d72dc2d553886776f8656140d1b945a">updateData</reimplementedby>
        <reimplementedby refid="classperif_1_1LidarMap_1a420005d3a49a29c32f26eb8bbe77afd9">updateData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates sensor data. Subclasses should maintain a reference to the data obtained from this function so it can be provided to observers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classperif_1_1Perif_1a556c780e9e4623aa6b7c3d167ef23e6b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void perif::Perif::representData</definition>
        <argsstring>()=0</argsstring>
        <name>representData</name>
        <reimplementedby refid="classperif_1_1GPS_1af70a23423ab6cb7230f7e3062d226b67">representData</reimplementedby>
        <reimplementedby refid="classperif_1_1AccelGyro_1a8e0648c0522349bf10773a2073024f5d">representData</reimplementedby>
        <reimplementedby refid="classperif_1_1USDist_1aabec8b21377dadc1cb42078fe7f3bf73">representData</reimplementedby>
        <reimplementedby refid="classperif_1_1BarPAT_1a387d0127e85b8f75b24581fd91c7cfac">representData</reimplementedby>
        <reimplementedby refid="classperif_1_1LidarMap_1aa4799e71b54de2d246a664dd2c6b75f2">representData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The representation of this peripheral&apos;s data in a meaningful way for debugging, caching, and database operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classperif_1_1Perif_1a29c48598a861d85256c30e28af67f864" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classTimer" kindref="compound">Timer</ref> &amp;</type>
        <definition>Timer&amp; perif::Perif::getTimer</definition>
        <argsstring>()</argsstring>
        <name>getTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a reference to this peripheral&apos;s timer.</para>
<para><simplesect kind="return"><para>a timer reference </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="94" column="1" bodyfile="main/perif/Perif.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a794a92b925f7970399f8b148caa5eef8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::initialize</definition>
        <argsstring>(gpio_num_t sda, gpio_num_t scl, bool sdaPullUp=false, bool sclPullUp=false, uint32_t frequency=100000UL)</argsstring>
        <name>initialize</name>
        <param>
          <type>gpio_num_t</type>
          <declname>sda</declname>
        </param>
        <param>
          <type>gpio_num_t</type>
          <declname>scl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sdaPullUp</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sclPullUp</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>frequency</declname>
          <defval>100000UL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the I2C port if not already and verifies this device is there.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sda</parametername>
</parameternamelist>
<parameterdescription>
<para>the SDA pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scl</parametername>
</parameternamelist>
<parameterdescription>
<para>the SCL pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdaPullUp</parametername>
</parameternamelist>
<parameterdescription>
<para>whether SDA is a pullup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sclPullUp</parametername>
</parameternamelist>
<parameterdescription>
<para>whether SCL is a pullup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>the bus frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether initialization was successfull </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="78" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="64" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a74447cfadf4d5054ba29b726afcdecd0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t I2Cdev::readByte_</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout=I2CDEV_DEFAULT_READ_TIMEOUT)</argsstring>
        <name>readByte_</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout</declname>
          <defval><ref refid="I2Cdev_8h_1ad9726bb02451bb8f59d3d2729e4cd20e" kindref="member">I2CDEV_DEFAULT_READ_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a single byte.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="90" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a3fae6b1ae9e9398b682eb7bdf6b43561" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t I2Cdev::readBytes_</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout=I2CDEV_DEFAULT_READ_TIMEOUT)</argsstring>
        <name>readBytes_</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout</declname>
          <defval><ref refid="I2Cdev_8h_1ad9726bb02451bb8f59d3d2729e4cd20e" kindref="member">I2CDEV_DEFAULT_READ_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads multiple bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="102" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="156" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a97645c5d6a3e295bb72b9ee5ab810d12" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::writeByte_</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t data)</argsstring>
        <name>writeByte_</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a single byte.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if write succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="113" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="279" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a2f9176cd44c3163ca3929ac1c2ff601b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::writeBytes_</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data)</argsstring>
        <name>writeBytes_</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes multiple bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if write succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="123" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="303" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a3be31bf7d3f40bb215d8854aac945db3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2Cdev::SelectRegister</definition>
        <argsstring>(uint8_t dev, uint8_t reg)</argsstring>
        <name>SelectRegister</name>
        <param>
          <type>uint8_t</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selects a device register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>the device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="142" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="221" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1ab028a4f330f4f31dc8af9890431a2a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t I2Cdev::readBit</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout=I2CDEV_DEFAULT_READ_TIMEOUT)</argsstring>
        <name>readBit</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitNum</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout</declname>
          <defval><ref refid="I2Cdev_8h_1ad9726bb02451bb8f59d3d2729e4cd20e" kindref="member">I2CDEV_DEFAULT_READ_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a single bit with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitNum</parametername>
</parameternamelist>
<parameterdescription>
<para>the bit number in the register </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of data read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="154" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="107" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a362d1d9bf44d01f0dfd7db94df8a61e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t I2Cdev::readBits</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout=I2CDEV_DEFAULT_READ_TIMEOUT)</argsstring>
        <name>readBits</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitStart</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout</declname>
          <defval><ref refid="I2Cdev_8h_1ad9726bb02451bb8f59d3d2729e4cd20e" kindref="member">I2CDEV_DEFAULT_READ_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads multiple bits with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitStart</parametername>
</parameternamelist>
<parameterdescription>
<para>the register bit to start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of data read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="167" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="119" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a80bf7daa6a6c34df95de78ac54d01b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t I2Cdev::readByte</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout=I2CDEV_DEFAULT_READ_TIMEOUT)</argsstring>
        <name>readByte</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout</declname>
          <defval><ref refid="I2Cdev_8h_1ad9726bb02451bb8f59d3d2729e4cd20e" kindref="member">I2CDEV_DEFAULT_READ_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a single byte with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="179" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="148" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1af62cd3a62562c704c6f183ea7a42064d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t I2Cdev::readWord</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout=I2CDEV_DEFAULT_READ_TIMEOUT)</argsstring>
        <name>readWord</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout</declname>
          <defval><ref refid="I2Cdev_8h_1ad9726bb02451bb8f59d3d2729e4cd20e" kindref="member">I2CDEV_DEFAULT_READ_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a single word with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="190" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="210" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1ab1ba3954fcc16341aa6e04e0a569c0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t I2Cdev::readBytes</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout=I2CDEV_DEFAULT_READ_TIMEOUT)</argsstring>
        <name>readBytes</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout</declname>
          <defval><ref refid="I2Cdev_8h_1ad9726bb02451bb8f59d3d2729e4cd20e" kindref="member">I2CDEV_DEFAULT_READ_TIMEOUT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads multiple words with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes read. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="202" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="201" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1aa68890af87de5471d32e583ebbd91acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::writeBit</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data)</argsstring>
        <name>writeBit</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitNum</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a single bit with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitNum</parametername>
</parameternamelist>
<parameterdescription>
<para>the register bit to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if write succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="214" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1a913371251b6a41520c080115650e1b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::writeBits</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data)</argsstring>
        <name>writeBits</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitStart</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes multiple bits with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitStart</parametername>
</parameternamelist>
<parameterdescription>
<para>the register bit to start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if write succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="225" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="250" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1aeb297637ef985cd562da465ba61b7042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::writeByte</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t data)</argsstring>
        <name>writeByte</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a single byte with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if write succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="235" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1aa4e39cac6c0eac5112f9132084bcc93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::writeBytes</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data)</argsstring>
        <name>writeBytes</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes multiple bytes with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if write succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="245" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="326" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classI2Cdev_1acbe68a802d6a177301736e60bedd1def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool I2Cdev::writeWord</definition>
        <argsstring>(uint8_t devAddr, uint8_t regAddr, uint16_t data)</argsstring>
        <name>writeWord</name>
        <param>
          <type>uint8_t</type>
          <declname>devAddr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>regAddr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes a single word with a mutex lock for thread-safety.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the register address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination to read into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if write succeeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/i2c/I2Cdev.h" line="255" column="1" bodyfile="main/perif/i2c/I2Cdev.cpp" bodystart="334" bodyend="341"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classperif_1_1PerifBase_1a1a3afaa535fda17e9f97123fffe78765" prot="public" static="no" mutable="no">
        <type><ref refid="Perif_8hpp_1a358ff4ee6d24694ee7661f0cce14377e" kindref="member">DevMap</ref></type>
        <definition>DevMap perif::PerifBase::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The key-value mapping of peripheral data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="37" column="1" bodyfile="main/perif/Perif.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classperif_1_1PerifBase_1a98964e5ca8384df64881265e0aa6d7b6" prot="public" static="no" mutable="no">
        <type>list&lt; function&lt; void(<ref refid="Perif_8hpp_1a358ff4ee6d24694ee7661f0cce14377e" kindref="member">DevMap</ref> &amp;)&gt; &gt;</type>
        <definition>list&lt;function&lt;void(DevMap&amp;)&gt; &gt; perif::PerifBase::hooks</definition>
        <argsstring></argsstring>
        <name>hooks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hooks registered to this peripheral so observers can be notified of any necessary changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/perif/Perif.hpp" line="42" column="1" bodyfile="main/perif/Perif.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>A peripheral connected over the I2C bus. The ESP32 has 2 I2C bus&apos;s and only bus 0 has default sda and scl pins, however both can have the sda and scl pins specified manually.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C bus port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdaPullup</parametername>
</parameternamelist>
<parameterdescription>
<para>if SDA pin is pullup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sclPullup</parametername>
</parameternamelist>
<parameterdescription>
<para>if SCL pin is pullup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C bus frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="66">
        <label>perif::PerifBase</label>
        <link refid="classperif_1_1PerifBase"/>
      </node>
      <node id="65">
        <label>perif::Perif</label>
        <link refid="classperif_1_1Perif"/>
        <childnode refid="66" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>perif::I2CPerif&lt; port, sdaPullup, sclPullup, frequency &gt;</label>
        <link refid="classperif_1_1I2CPerif"/>
        <childnode refid="65" relation="public-inheritance">
        </childnode>
        <childnode refid="67" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="67">
        <label>I2Cdev</label>
        <link refid="classI2Cdev"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="70">
        <label>perif::PerifBase</label>
        <link refid="classperif_1_1PerifBase"/>
      </node>
      <node id="69">
        <label>perif::Perif</label>
        <link refid="classperif_1_1Perif"/>
        <childnode refid="70" relation="public-inheritance">
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>timer</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>Timer</label>
        <link refid="classTimer"/>
      </node>
      <node id="68">
        <label>perif::I2CPerif&lt; port, sdaPullup, sclPullup, frequency &gt;</label>
        <link refid="classperif_1_1I2CPerif"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
        <childnode refid="72" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="72">
        <label>I2Cdev</label>
        <link refid="classI2Cdev"/>
      </node>
    </collaborationgraph>
    <location file="main/perif/I2CPerif.hpp" line="53" column="1" bodyfile="main/perif/I2CPerif.hpp" bodystart="53" bodyend="91"/>
    <listofallmembers>
      <member refid="classperif_1_1I2CPerif_1a3275bcc89b3d8ddfa221fb76669c2d45" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>address</name></member>
      <member refid="classperif_1_1I2CPerif_1aa91b8eca31223fddd191a50b8a0a526d" prot="public" virt="virtual"><scope>perif::I2CPerif</scope><name>begin</name></member>
      <member refid="classperif_1_1PerifBase_1a1a3afaa535fda17e9f97123fffe78765" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>data</name></member>
      <member refid="classperif_1_1Perif_1a29c48598a861d85256c30e28af67f864" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>getTimer</name></member>
      <member refid="classperif_1_1PerifBase_1a98964e5ca8384df64881265e0aa6d7b6" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>hooks</name></member>
      <member refid="classI2Cdev_1afd73def195a0441baf3e4dd774de606f" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>I2Cdev</name></member>
      <member refid="classperif_1_1I2CPerif_1a80ab5e9bf8a8f2f2278a35d646442b1b" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>I2CPerif</name></member>
      <member refid="classI2Cdev_1a794a92b925f7970399f8b148caa5eef8" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>initialize</name></member>
      <member refid="classI2Cdev_1a94b914bfcbd0fe1f6fdd7b9c6f4ab921" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>initialized</name></member>
      <member refid="classperif_1_1I2CPerif_1aa8741297b2f5f9a0242806afa26b7361" prot="public" virt="virtual"><scope>perif::I2CPerif</scope><name>isConnected</name></member>
      <member refid="classperif_1_1Perif_1a8e0c30d9aeb9069e3c1a1aa2db672b62" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>Perif</name></member>
      <member refid="classperif_1_1Perif_1a21a0ae2afadf66cffa487b4a033598d4" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>Perif</name></member>
      <member refid="classperif_1_1PerifBase_1a8ac4d4632fed61f15c375c6db4da3e77" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>PerifBase</name></member>
      <member refid="classperif_1_1PerifBase_1a30553bdac90621e309a37628774a7a51" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>PerifBase</name></member>
      <member refid="classI2Cdev_1a1d1e63732aa9f50369172b27a034129c" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>port</name></member>
      <member refid="classI2Cdev_1ab028a4f330f4f31dc8af9890431a2a63" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>readBit</name></member>
      <member refid="classI2Cdev_1a362d1d9bf44d01f0dfd7db94df8a61e5" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>readBits</name></member>
      <member refid="classI2Cdev_1a80bf7daa6a6c34df95de78ac54d01b1f" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>readByte</name></member>
      <member refid="classI2Cdev_1a74447cfadf4d5054ba29b726afcdecd0" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>readByte_</name></member>
      <member refid="classI2Cdev_1ab1ba3954fcc16341aa6e04e0a569c0ea" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>readBytes</name></member>
      <member refid="classI2Cdev_1a3fae6b1ae9e9398b682eb7bdf6b43561" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>readBytes_</name></member>
      <member refid="classI2Cdev_1af62cd3a62562c704c6f183ea7a42064d" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>readWord</name></member>
      <member refid="classperif_1_1PerifBase_1a2e8bcc221ee253b21b61c7c07307d931" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>registerHook</name></member>
      <member refid="classperif_1_1Perif_1a556c780e9e4623aa6b7c3d167ef23e6b" prot="protected" virt="pure-virtual"><scope>perif::I2CPerif</scope><name>representData</name></member>
      <member refid="classI2Cdev_1a3be31bf7d3f40bb215d8854aac945db3" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>SelectRegister</name></member>
      <member refid="classperif_1_1Perif_1acfa1256201bead82ccce1a0a8bcc24e1" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>timer</name></member>
      <member refid="classperif_1_1Perif_1ad6fe1a13354bba4af4cc2751399ed93c" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>update</name></member>
      <member refid="classperif_1_1Perif_1a7c9b9c1af5300dc5c007f9559fefbffe" prot="protected" virt="pure-virtual"><scope>perif::I2CPerif</scope><name>updateData</name></member>
      <member refid="classI2Cdev_1aa68890af87de5471d32e583ebbd91acb" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>writeBit</name></member>
      <member refid="classI2Cdev_1a913371251b6a41520c080115650e1b59" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>writeBits</name></member>
      <member refid="classI2Cdev_1aeb297637ef985cd562da465ba61b7042" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>writeByte</name></member>
      <member refid="classI2Cdev_1a97645c5d6a3e295bb72b9ee5ab810d12" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>writeByte_</name></member>
      <member refid="classI2Cdev_1aa4e39cac6c0eac5112f9132084bcc93e" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>writeBytes</name></member>
      <member refid="classI2Cdev_1a2f9176cd44c3163ca3929ac1c2ff601b" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>writeBytes_</name></member>
      <member refid="classI2Cdev_1acbe68a802d6a177301736e60bedd1def" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>writeWord</name></member>
      <member refid="classI2Cdev_1af9aa307995256fd1ea40e25c956e76fd" prot="protected" virt="non-virtual"><scope>perif::I2CPerif</scope><name>~I2Cdev</name></member>
      <member refid="classperif_1_1Perif_1a9b09771466ddb178c694eec670089fe1" prot="public" virt="non-virtual"><scope>perif::I2CPerif</scope><name>~Perif</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
