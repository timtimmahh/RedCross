<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classDataServer" kind="class" language="C++" prot="public">
    <compoundname>DataServer</compoundname>
    <includes refid="DataServer_8h" local="no">DataServer.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classDataServer_1a66cf82f11a9dfeb2e4d7c2cd9f1febdc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>DataServer::DataServer</definition>
        <argsstring>(int port)</argsstring>
        <name>DataServer</name>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and sets up the WebServer with the specified port and sensors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the WebServer port number (default is 80 for browser use) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/net/DataServer.h" line="34" column="1" bodyfile="main/net/DataServer.h" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classDataServer_1a7652c5c4c0db565342ea40e031b55f87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DataServer::wifiConnected</definition>
        <argsstring>()</argsstring>
        <name>wifiConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback when <ref refid="classWiFi" kindref="compound">WiFi</ref> is connected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/net/DataServer.h" line="47" column="1" bodyfile="main/net/DataServer.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classDataServer_1a8574790df14c97bc7b42eb52214ca76f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool DataServer::remoteAvailable</definition>
        <argsstring>()</argsstring>
        <name>remoteAvailable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether a remote device is available on the network.</para>
<para><simplesect kind="return"><para>whether a remote is available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/net/DataServer.h" line="57" column="1" bodyfile="main/net/DataServer.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classDataServer_1a1bae1311f782108d515fe1127029dd2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DataServer::handleClient</definition>
        <argsstring>()</argsstring>
        <name>handleClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper so Arduino loop() function can handle client connections without exposing the entire WebServer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/net/DataServer.h" line="66" column="1" bodyfile="main/net/DataServer.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classDataServer_1a52ae55f6a58aa563e49501ae6ba8fab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DataServer::registerSensor</definition>
        <argsstring>()</argsstring>
        <name>registerSensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Variadic template termination function. Adds the not found page for bad URLs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/net/DataServer.h" line="75" column="1" bodyfile="main/net/DataServer.h" bodystart="75" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classDataServer_1a8b63f295c845c91db3aad45a9ab9b86a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class S</type>
          </param>
          <param>
            <type>class...</type>
            <declname>SensorTypes</declname>
            <defname>SensorTypes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DataServer::registerSensor</definition>
        <argsstring>(S sensor, SensorTypes... sT)</argsstring>
        <name>registerSensor</name>
        <param>
          <type>S</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>SensorTypes...</type>
          <declname>sT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds all specified sensors to the WebServer.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>the data type for a perif </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SensorTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensors types to register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>the first perif to register </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sT</parametername>
</parameternamelist>
<parameterdescription>
<para>the rest of the sensors to register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/net/DataServer.h" line="100" column="1" bodyfile="main/net/DataServer.h" bodystart="100" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Creates a WebServer on ESP32 to display perif data. </para>
    </detaileddescription>
    <location file="main/net/DataServer.h" line="21" column="1" bodyfile="main/net/DataServer.h" bodystart="21" bodyend="113"/>
    <listofallmembers>
      <member refid="classDataServer_1a66cf82f11a9dfeb2e4d7c2cd9f1febdc" prot="public" virt="non-virtual"><scope>DataServer</scope><name>DataServer</name></member>
      <member refid="classDataServer_1a1bae1311f782108d515fe1127029dd2f" prot="public" virt="non-virtual"><scope>DataServer</scope><name>handleClient</name></member>
      <member refid="classDataServer_1a52ae55f6a58aa563e49501ae6ba8fab8" prot="public" virt="non-virtual"><scope>DataServer</scope><name>registerSensor</name></member>
      <member refid="classDataServer_1a8b63f295c845c91db3aad45a9ab9b86a" prot="public" virt="non-virtual"><scope>DataServer</scope><name>registerSensor</name></member>
      <member refid="classDataServer_1a8574790df14c97bc7b42eb52214ca76f" prot="public" virt="non-virtual"><scope>DataServer</scope><name>remoteAvailable</name></member>
      <member refid="classDataServer_1a7652c5c4c0db565342ea40e031b55f87" prot="public" virt="non-virtual"><scope>DataServer</scope><name>wifiConnected</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
